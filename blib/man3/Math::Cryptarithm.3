.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::Cryptarithm 3"
.TH Math::Cryptarithm 3 "2021-08-14" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Cryptarithm \- Solving simple cryptarithm.
.SH "VERSION"
.IX Header "VERSION"
Version 0.20.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A primitive cryptarithm (also known as verbal arithmetic) solver.
.PP
See English Wikipedia: Verbal arithmetic <https://en.wikipedia.org/wiki/Verbal_arithmetic>.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Math::Cryptarithm;
\&    use Data::Dumper;
\&
\&    my $abc5 = ["A + B = C5 ", "A % 2 = 0"];
\&
\&    my $abc5_ans_in_eqs = Math::Cryptarithm\->new($abc5)\->solve_ans_in_equations();
\&
\&    for my $set ($abc5_ans_in_eqs\->@*) { 
\&        print join "\en", @{$set};
\&        print "\en\en"
\&    }
\&
\&    # 2 + 3 = 05 
\&    # 2 % 2 = 0
\&    # 
\&    # 4 + 1 = 05 
\&    # 4 % 2 = 0
\&    #
\&    # 8 + 7 = 15 
\&    # 8 % 2 = 0
\&    #
\&    # 6 + 9 = 15 
\&    # 6 % 2 = 0
\&
\&
\&    my $abcd = [
\&        "ABA * ABA = CCDCC", 
\&        "ABA * A = CAC", 
\&        "ABA * B = ABA"
\&    ];
\&
\&    my $abcd_ans = Math::Cryptarithm\->new($abcd)\->solve_alphabetvalue_hash();
\&
\&    say scalar $abcd_ans\->@*;             # 1
\&    say $abcd_ans\->[0]\->{"A"};            # 2
\&    say $abcd_ans\->[0]\->{"B"};            # 1
\&    say $abcd_ans\->[0]\->{"C"};            # 4
\&    say $abcd_ans\->[0]\->{"D"};            # 9 
\&
\&
\&    my $magical_seven = ["ABCDEF * 6 = DEFABC"];
\&    my $magical_seven_ans = Math::Cryptarithm\->new($magical_seven)\->solve_alphabetvalue_hash();
\&
\&    print Dumper($magical_seven_ans);
\&
\&    # $VAR1 = [ { \*(AqA\*(Aq => 1, \*(AqF\*(Aq => 7, \*(AqE\*(Aq => 5, \*(AqB\*(Aq => 4,\*(AqD\*(Aq => 8, \*(AqC\*(Aq => 2 ];
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBsolve_alphabetvalue_hash()\fP"
.IX Subsection "solve_alphabetvalue_hash()"
Return a list object of hashes with all possible solutions. Different letters represent different digits.
.SS "\fBsolve_ans_in_equations()\fP"
.IX Subsection "solve_ans_in_equations()"
Return the possible solutions in \*(L"decrypted equations\*(R" form. See the section Synopsis.
.SH "TODOS"
.IX Header "TODOS"
.SS "Improve the Module by Backtracking instead of Permutations"
.IX Subsection "Improve the Module by Backtracking instead of Permutations"
Currently the module runs slowly when the number of variables is equal to or more than 6. Using a backtracking as the algorithm should improve the performance of the module.
.ie n .SS """?"""
.el .SS "``?''"
.IX Subsection "?"
Allow \*(L"?\*(R" to represent arbitary digits. See the related Wikipedia entry (zh <https://zh.wikipedia.org/wiki/%E8%9F%B2%E9%A3%9F%E7%AE%97> or ja <https://ja.wikipedia.org/wiki/%E8%99%AB%E9%A3%9F%E3%81%84%E7%AE%97>) using \*(L"square box\*(R" representing any possible digits.
.SS "setLeadingZeros($symbol)"
.IX Subsection "setLeadingZeros($symbol)"
To determine whether allow zeros as possible values as the leading part of a number. 1 is allowed. 0 means not allowed. Default should be 1.
.SH "AUTHOR"
.IX Header "AUTHOR"
Cheok-Yin Fung, <fungcheokyin at gmail.com>
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/E7\-87\-83/Math\-Cryptarithm>.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2021 \s-1FUNG CHEOK YIN,\s0 all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it under the
terms of the the Artistic License (2.0).
